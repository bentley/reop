.\"
.\"Copyright (c) 2014 Ted Unangst <tedu@tedunangst.com>
.\"
.\"Permission to use, copy, modify, and distribute this software for any
.\"purpose with or without fee is hereby granted, provided that the above
.\"copyright notice and this permission notice appear in all copies.
.\"
.\"THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\"WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\"MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\"ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\"WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\"ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\"OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.Dd $Mdocdate: January 20 2015 $
.Dt REOP 1
.Os
.Sh NAME
.Nm reop
.Nd reasonable expectation of privacy
.Sh SYNOPSIS
.Nm reop
.Fl G
.Op Fl n
.Op Fl i Ar identity
.Op Fl p Ar public-key-file Fl s Ar secret-key-file
.Nm reop
.Fl D
.Op Fl i Ar identity
.Op Fl p Ar public-key-file Fl s Ar secret-key-file
.Fl m Ar message-file
.Op Fl x Ar ciphertext-file
.Nm reop
.Fl E
.Op Fl 1b
.Op Fl i Ar identity
.Op Fl p Ar public-key-file Fl s Ar secret-key-file
.Fl m Ar message-file
.Op Fl x Ar ciphertext-file
.Nm reop
.Fl S
.Op Fl e
.Op Fl x Ar signature-file
.Fl s Ar secret-key-file
.Fl m Ar message-file
.Nm reop
.Fl V
.Op Fl eq
.Op Fl x Ar signature-file
.Fl p Ar public-key-file
.Fl m Ar message-file
.Sh DESCRIPTION
.Nm
can encrypt and decrypt files, using either symmetric or public key
cryptography.
.Nm
can also cryptographically sign and verify files, using public key
cryptography.
.Pp
Select the mode of operation with the following options:
.Bl -tag -width Ds
.It Fl D
Decrypt a message-file.
.It Fl E
Encrypt a message-file.
.Pp
When not given a public-key-file,
.Nm
will ask for a passphrase, derive a key from the passphrase, and encrypt the
message-file using the key.
.Pp
When given a public-key-file,
.Nm
will encrypt the message-file so that it can only be decrypted with the
matching secret-key-file.
Public key encryption also uses the secret key to authenticate the message.
.Pp
Although authenticated, messages are deniable.
The recipient will be able to verify the sender, but unable to prove this
to anyone else.
.It Fl G
Generate a new key pair.
.It Fl S
Sign the message-file and create a signature-file.
.It Fl V
Verify that the signature in the signature-file matches the contents of the
message-file.
.El
.Pp
The other options are as follows:
.Bl -tag -width Ds
.It Fl 1
(The number one.)
Encrypt messages using the deprecated version 1 format.
When decrypting messages,
.Nm
detects the format automatically.
.It Fl b
When encrypting, use a binary format for the cipertext-file.
Without this option,
.Nm
encodes files using base-64 encoding, which uses more space than the binary
format.
Base-64 encoded data is plain text and is easy to copy and paste.
When decrypting files,
.Nm
automatically detects the correct format.
.It Fl e
When signing, combine the message and its signature in the signature-file.
Without this option,
.Nm
puts a detached signature in the signature-file.
.It Fl i Ar identity
During key pair generation,
.Nm
will tag the key pair with the given identity.
When looking up key pairs,
.Nm
will search for a pair tagged with the given identity.
.It Fl m Ar message-file
When signing, the file containing the message to sign.
When verifying, the file containing the message to verify.
When encrypting or decrypting, the plaintext.
.It Fl n
Do not ask for a passphrase during key generation.
Without this option,
.Nm
will prompt for a passphrase to protect the secret key.
.Pp
The purpose of protecting the secret key with a passphrase is so that, if
somebody steals the secret key, they still cannot use it
unless they also learn the passhrase.
.It Fl p Ar public-key-file
A public key produced by
.Fl G .
.It Fl q
Quiet mode.
Suppress informational output.
.It Fl s Ar secret-key-file
A secret (private) key produced by
.Fl G .
.It Fl x Ar xfile
When signing of verifying, the signature-file.
Without this option,
.Nm
assumes
.Ar message-file Ns .sig .
When encrypting, the ciphertext-file.
Without this option,
.Nm
assumes
.Ar message-file Ns .enc .
.El
.Sh ENVIRONMENT
.Bl -tag -width Ds
.It Ev REOP_PASSPHRASE
Normally, when
.Nm
requires a password, it will prompt the user.
Alternatively, a password can be provided in the environment which may be
useful when executing
.Nm
as part of an automated system.
.El
.Sh FILES
The key and data files created by
.Nm
have similar format.
A plain text line of the form
.Dl ident: Ar identity
is used to match key pairs.
The key or ciphertext follows and is base-64 encoded.
.Pp
(If the file was encrypted with the
.Fl b
option, the ciphertext is in binary format.)
.Pp
.Nm
searches the
.Pa ~/.reop
directory for default keys named:
.Bl -tag -width Dspubkeyring
.It Pa seckey
Your secret key
.It Pa pubkey
Your public key
.It Pa pubkeyring
Your set of trusted third party keys, searched by
.Ar identity .
.El
.Pp
The
.Pa pubkeyring
file is simply a sequence of public key files, concatenated into one, and
separated by newlines.
.Sh EXIT STATUS
.Ex -std reop
It may fail for one of the following reasons:
.Pp
.Bl -bullet -compact
.It
Some necessary files do not exist.
.It
The passphrase is incorrect.
.It
The message-file was corrupted and its signature does not match.
.It
The message-file is too large.
.El
.Sh EXAMPLES
Create a new key pair, and store the new key files in
.Pa ~/.reop :
.Dl $ reop -G
.Pp
Create a new key pair:
.Dl $ reop -G -p newkey.pub -s newkey.sec
.Pp
Encrypt a file with symmetric encryption:
.Dl $ ./reop -E -m message.txt -x message.txt.enc
.Pp
Encrypt a file with public key encryption:
.Dl $ ./reop -E -p your-friend.pub -m message.txt -x message.txt.enc
.Pp
Encrypt a file with public key encryption, assuming your friend's public key
is in
.Pa ~/.reop/pubkeyring :
.Dl $ ./reop -E -i yourfriend@example.org -m hello.txt -x hello.txt.enc
.Pp
Sign a file, specifying a signature name:
.Dl $ reop -S -s key.sec -m message.txt -x msg.sig
.Pp
Verify a signed message, using the default identity:
.Dl $ reop -V -x generalsorders.sig
.Pp
Add a new friend's public key to your keyring:
.Dl $ cat new-friend.pub >> ~/.reop/pubkeyring
.Sh HISTORY
The
.Nm
command was first released on 1 Apr 2014.
This document describes the forthcoming 3.0 release.
.Sh AUTHORS
.An Ted Unangst Aq Mt tedu@tedunangst.com
